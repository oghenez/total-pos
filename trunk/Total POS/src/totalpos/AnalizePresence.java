/*
 * AnalizePresence.java
 *
 * Created on 06-mar-2012, 18:41:25
 */

package totalpos;

import java.awt.Color;
import java.awt.Component;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Saúl Hidalgo.
 */
public class AnalizePresence extends javax.swing.JInternalFrame {

    String storeName;
    Date fromDate;
    Date untilDate;
    String fromDateString;
    String untilDateString;
    public boolean isOk = false;

    /** Creates new form AnalizePresence */
    public AnalizePresence(String sn, String fd, String ud) {
        try {
            initComponents();
            this.storeName = sn;
            fromDate = Constants.sdfDay2DB.parse(fd);
            untilDate = Constants.sdfDay2DB.parse(ud);
            fromDateString = fd;
            untilDateString = ud;

            if ( !ConnectionDrivers.loadPresence( presenceTable, fromDateString, untilDateString, storeName, fromDate, untilDate) ){
                updateAll();
            }

            String[] t = fd.split("-");
            fromLabelDate.setText(t[2] + "/" + t[1] + "/" + t[0]);

            t = ud.split("-");
            untilLabelDate.setText(t[2] + "/" + t[1] + "/" + t[0]);

            storeNameLabeLabel.setText(sn);

            System.out.println("Termino");
            isOk = true;
        } catch (SQLException ex) {
            Logger.getLogger(AnalizePresence.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
    }

    private void updateAll() throws SQLException{
        List<String> header = new LinkedList<String>();
        header.add("Código");
        header.add("Empleado");
        header.add("Horas");
        header.add("Bono Nocturno");
        header.add("Bono de Asistencia");
        header.add("Bono Produccion");
        header.add("Horas trabajadas");
        int offset = header.size();
        Date t = fromDate;
        Calendar c = Calendar.getInstance();
        c.setTime(t);
        
        while(t.before(untilDate) || t.equals(untilDate)){
            header.add(Constants.dayName[t.getDay()] + " " + t.getDate());
            c.setTime(t);
            c.add(Calendar.DATE, 1);
            t = c.getTime();
        }

        Map<String, Integer> map = new TreeMap<String, Integer>();
        List<Employ> employs = ConnectionDrivers.getAllEmployBetween(fromDateString, untilDateString, storeName);
        String[][] tableModel = new String[employs.size()][2];
        System.out.println("Consegui " + employs.size() + " Empleados");
        for (int i = 0 ; i < employs.size() ; ++i ) {
            tableModel[i][0] = employs.get(i).getCode();
            tableModel[i][1] = employs.get(i).getName();
            map.put(tableModel[i][0], i);
        }

        presenceTable.setModel(new DefaultTableModel(tableModel,header.toArray()));

        ConnectionDrivers.fillPresence((DefaultTableModel) presenceTable.getModel(), fromDateString, untilDateString, storeName, map, offset);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        presenceTable = new javax.swing.JTable(){
            @Override public Component prepareRenderer(TableCellRenderer renderer, int row, int column){
                Component comp = super.prepareRenderer(renderer, row, column);
                if ( presenceTable.getModel().getColumnName(column).split(" ")[0].equals("Dom") ){
                    comp.setBackground(Color.YELLOW);
                }else{
                    comp.setBackground(Constants.transparent);
                }
                return comp;
            }
        };
        titleLabel = new javax.swing.JLabel();
        fromLabel = new javax.swing.JLabel();
        untilLabel = new javax.swing.JLabel();
        fromLabelDate = new javax.swing.JLabel();
        untilLabelDate = new javax.swing.JLabel();
        storeNameLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        send2ProfitButton = new javax.swing.JButton();
        storeNameLabeLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        recalcularAllButton = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Control de Asistencias y Horas Extras");

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        presenceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        presenceTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        presenceTable.setName("presenceTable"); // NOI18N
        presenceTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        presenceTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(presenceTable);

        titleLabel.setFont(new java.awt.Font("Courier New", 1, 18));
        titleLabel.setText("Control de Asistencias y Horas Extras");
        titleLabel.setName("titleLabel"); // NOI18N

        fromLabel.setFont(new java.awt.Font("Courier New", 1, 14));
        fromLabel.setText("Nómina desde:");
        fromLabel.setName("fromLabel"); // NOI18N

        untilLabel.setFont(new java.awt.Font("Courier New", 1, 14));
        untilLabel.setText("Hasta");
        untilLabel.setName("untilLabel"); // NOI18N

        fromLabelDate.setFont(new java.awt.Font("Courier New", 1, 14));
        fromLabelDate.setText("Nómina desde:");
        fromLabelDate.setName("fromLabelDate"); // NOI18N

        untilLabelDate.setFont(new java.awt.Font("Courier New", 1, 14));
        untilLabelDate.setText("Nómina desde:");
        untilLabelDate.setName("untilLabelDate"); // NOI18N

        storeNameLabel.setFont(new java.awt.Font("Courier New", 1, 14));
        storeNameLabel.setText("Agencia");
        storeNameLabel.setName("storeNameLabel"); // NOI18N

        closeButton.setText("Cerrar");
        closeButton.setName("closeButton"); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        send2ProfitButton.setText("Enviar a Profit");
        send2ProfitButton.setName("send2ProfitButton"); // NOI18N

        storeNameLabeLabel.setFont(new java.awt.Font("Courier New", 1, 14));
        storeNameLabeLabel.setText("Nómina desde:");
        storeNameLabeLabel.setName("storeNameLabeLabel"); // NOI18N

        saveButton.setText("Guardar");
        saveButton.setName("saveButton"); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        recalcularAllButton.setText("Borrar Todo");
        recalcularAllButton.setName("recalcularAllButton"); // NOI18N
        recalcularAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recalcularAllButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1055, Short.MAX_VALUE)
                    .addComponent(titleLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fromLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromLabelDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(untilLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(untilLabelDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(storeNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(storeNameLabeLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(send2ProfitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(recalcularAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromLabel)
                    .addComponent(untilLabel)
                    .addComponent(fromLabelDate)
                    .addComponent(untilLabelDate)
                    .addComponent(storeNameLabel)
                    .addComponent(storeNameLabeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(send2ProfitButton)
                    .addComponent(saveButton)
                    .addComponent(recalcularAllButton)
                    .addComponent(closeButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            ConnectionDrivers.saveTable((DefaultTableModel) presenceTable.getModel(), fromDateString, untilDateString, storeName);
            MessageBox msb = new MessageBox(MessageBox.SGN_SUCCESS, "Guardado Satisfactoriamente.");
            msb.show(null);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void recalcularAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recalcularAllButtonActionPerformed
        try {
            updateAll();
        } catch (SQLException ex) {
            MessageBox msb = new MessageBox(MessageBox.SGN_DANGER, "No se ha cargado la información correctamente.");
            msb.show(null);
        }
    }//GEN-LAST:event_recalcularAllButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JLabel fromLabelDate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable presenceTable;
    private javax.swing.JButton recalcularAllButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton send2ProfitButton;
    private javax.swing.JLabel storeNameLabeLabel;
    private javax.swing.JLabel storeNameLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel untilLabel;
    private javax.swing.JLabel untilLabelDate;
    // End of variables declaration//GEN-END:variables

}
